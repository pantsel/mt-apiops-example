name: Build and Deploy

on:
  workflow_dispatch:
    inputs:
      entity:
        required: true
        type: choice
        description: "The entity to build the configuration for"
        options:
          - tripwhiz
      environment:
        required: true
        type: choice
        description: "The environment to build the configuration for"
        options:
          - development
          - acceptance
          - production
        default: development
      show-summary:
        required: false
        type: boolean
        description: "Show the summary of the build and deploy process"
        default: true

env:
  KONNECT_API_URL: https://eu.api.konghq.com
  KONNECT_CONTROL_PLANE_NAME: ${{ inputs.entity }}-${{ inputs.environment }}
  APIS_DIR: ${{ github.workspace }}/apis
  ENTITY_DIR: ${{ github.workspace }}/entities/${{ inputs.entity }}
  ENTITY_DIR_KONG: ${{ github.workspace }}/entities/${{ inputs.entity }}/kong
  ENTITY_METADATA: ${{ github.workspace }}/entities/${{ inputs.entity }}/environments/${{ inputs.environment }}/metadata.json
  ENTITY_ENV_VARS: ${{ github.workspace }}/entities/${{ inputs.entity }}/environments/${{ inputs.environment }}/env.sh
  ENTITY_COMMON_VARS: ${{ github.workspace }}/entities/${{ inputs.entity }}/env.sh
  OUTPUT_DIR: ${{ github.workspace }}/.generated
  GOVERNANCE_DIR: ${{ github.workspace }}/governance

jobs:
  get-apis:
    runs-on: ubuntu-latest
    outputs:
      apis: ${{ steps.set-apis.outputs.apis }}
    steps:
      - uses: actions/checkout@v4
      - name: Get enabled APIs from metadata
        id: set-apis
        run: |
          APIS=$(jq -c '[ .apis[] | . ]' $ENTITY_METADATA)
          echo "apis=$APIS" >> $GITHUB_OUTPUT

  build:
    name: Build ${{ matrix.api.name }}-${{ matrix.api.version }} on ${{ inputs.entity }} ${{ inputs.environment }}
    needs: get-apis
    runs-on: ubuntu-latest
    env:
      API_SPEC: ${{ github.workspace }}/apis/${{ matrix.api.name }}/${{ matrix.api.version }}/openapi.yaml
      API_KONG_DIR: ${{ github.workspace }}/apis/${{ matrix.api.name }}/${{ matrix.api.version }}/kong
    strategy:
      matrix:
        api: ${{ fromJson(needs.get-apis.outputs.apis) }}
    
    steps:
      - uses: actions/checkout@v4

      - uses: kong/setup-deck@v1

      - name: Load environment variables
        uses: ./.github/actions/load-env
        with:
          entity-common-vars: ${{ env.ENTITY_COMMON_VARS }}
          entity-env-vars: ${{ env.ENTITY_ENV_VARS }}
          entity: ${{ inputs.entity }}
          environment: ${{ inputs.environment }}
          api-name: ${{ matrix.api.name }}
          api-namespace: ${{ matrix.api.namespace }}
          api-enabled: ${{ matrix.api.enabled }}
          api-version: ${{ matrix.api.version }}

      - name: Lint OpenAPI Spec
        run: |
          deck file lint -s $API_SPEC $GOVERNANCE_DIR/openapi.ruleset.yaml

      - name: Convert OpenAPI Spec to Kong declarative config
        run: |
          cat ${{ env.API_SPEC }} | deck file openapi2kong --generate-security -o $OUTPUT_DIR/${{ matrix.api.name }}-${{ matrix.api.version }}-kong.yaml

      - name: Add plugins (API)
        run: |
          # if ./plugins exists, and has at least one file .yaml file, apply the plugins
          if [ -d "./plugins" ] && [ "$(ls -A ./plugins/*.yaml 2>/dev/null)" ]; then
            cat $OUTPUT_DIR/${{ matrix.api.name }}-${{ matrix.api.version }}-kong.yaml | deck file add-plugins ./plugins/*.yaml -o $OUTPUT_DIR/${{ matrix.api.name }}-${{ matrix.api.version }}-kong.yaml
          else
            echo "No API level plugins found for ${{ matrix.api.name }}/${{ matrix.api.version }}"
          fi
        working-directory: ${{ env.API_KONG_DIR }}

      - name: Add plugins (Entity)
        run: |
          # if ./plugins exists, and has at least one file .yaml file, apply the plugins
          if [ -d "./plugins" ] && [ "$(ls -A ./plugins/*.yaml 2>/dev/null)" ]; then
            cat $OUTPUT_DIR/${{ matrix.api.name }}-${{ matrix.api.version }}-kong.yaml | deck file add-plugins ./plugins/*.yaml -o $OUTPUT_DIR/${{ matrix.api.name }}-${{ matrix.api.version }}-kong.yaml
          else
            echo "No Entity level plugins found for ${{ inputs.entity }}"
          fi
        working-directory: ${{ env.ENTITY_DIR_KONG }}

      - name: Apply patches (Entity)
        run: |
          # if ./patches exists, and has at least one file .yaml file, apply the patches
          if [ -d "./patches" ] && [ "$(ls -A ./patches/*.yaml 2>/dev/null)" ]; then
            cat $OUTPUT_DIR/${{ matrix.api.name }}-${{ matrix.api.version }}-kong.yaml | deck file patch ./patches/*.yaml -o $OUTPUT_DIR/${{ matrix.api.name }}-${{ matrix.api.version }}-kong.yaml
          else
            echo "No Entity level patches found for ${{ inputs.entity }}"
          fi
        working-directory: ${{ env.ENTITY_DIR_KONG }}

      - name: Add namespace if required
        run: |
          if [ -n "$DECK_FILE_NAMESPACE_PATH_PREFIX" ] || [ -n "$DECK_FILE_NAMESPACE_HOST" ]; then
            cmd="deck file namespace"
          if [ -n "$DECK_FILE_NAMESPACE_PATH_PREFIX" ]; then
            cmd="$cmd --path-prefix=$DECK_FILE_NAMESPACE_PATH_PREFIX"
          fi
          if [ -n "$DECK_FILE_NAMESPACE_HOST" ]; then
            cmd="$cmd --host=$DECK_FILE_NAMESPACE_HOST"
          fi
            cat $OUTPUT_DIR/${{ matrix.api.name }}-${{ matrix.api.version }}-kong.yaml | $cmd -o $OUTPUT_DIR/${{ matrix.api.name }}-${{ matrix.api.version }}-kong.yaml
          else
            echo "Skipping namespace step as both path-prefix and host are empty."
          fi
        working-directory:  ${{ env.OUTPUT_DIR }}

      - name: Add Tags
        run: |
          cat $OUTPUT_DIR/${{ matrix.api.name }}-${{ matrix.api.version }}-kong.yaml | deck file add-tags $DECK_API_NAME $DECK_API_VERSION -o $OUTPUT_DIR/${{ matrix.api.name }}-${{ matrix.api.version }}-kong.yaml
        working-directory: ${{ env.ENTITY_DIR_KONG }}

      - name: Validate Generated Kong Gateway configuration
        run: deck file validate $OUTPUT_DIR/${{ matrix.api.name }}-${{ matrix.api.version }}-kong.yaml
        working-directory: ${{ env.OUTPUT_DIR }}

      - name: Render Kong Gateway configuration
        run: |
          deck file render --populate-env-vars $OUTPUT_DIR/${{ matrix.api.name }}-${{ matrix.api.version }}-kong.yaml \
            -o $OUTPUT_DIR/${{ matrix.api.name }}-${{ matrix.api.version }}-kong.yaml
        working-directory: ${{ env.OUTPUT_DIR }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ inputs.entity }}-${{ inputs.environment }}-${{ matrix.api.name }}-${{ matrix.api.version }}
          path: |
            ${{ env.OUTPUT_DIR }}/${{ matrix.api.name }}-${{ matrix.api.version }}-kong.yaml
  
  combine:
    name: Combine Kong Gateway configurations on ${{ inputs.entity }} ${{ inputs.environment }}
    needs:
      - get-apis
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: kong/setup-deck@v1

      - name: Load environment variables
        uses: ./.github/actions/load-env
        with:
          entity-common-vars: ${{ env.ENTITY_COMMON_VARS }}
          entity-env-vars: ${{ env.ENTITY_ENV_VARS }}
          entity: ${{ inputs.entity }}
          environment: ${{ inputs.environment }}
          api-name: ${{ matrix.api.name }}
          api-namespace: ${{ matrix.api.namespace }}
          api-enabled: ${{ matrix.api.enabled }}
          api-version: ${{ matrix.api.version }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: artifacts-${{ inputs.entity }}-${{ inputs.environment }}-*
          path: ./downloaded

      - name: Merge all artifacts into a single folder
        run: |
          mkdir merged-artifacts
          find ./downloaded -type f -exec cp {} merged-artifacts/ \;

      - name: Merge all artifacts into a single file
        run: |
          deck file merge merged-artifacts/*-kong.yaml -o ${{ env.OUTPUT_DIR }}/kong-combined.yaml

      - name: Apply governance plugins
        run: |
          cat  ${{ env.OUTPUT_DIR }}/kong-combined.yaml | deck file add-plugins ${{ env.GOVERNANCE_DIR }}/kong/plugins/*.yaml -o ${{ env.OUTPUT_DIR }}/kong-combined.yaml

      - name: Apply governance patches
        run: |
          cat  ${{ env.OUTPUT_DIR }}/kong-combined.yaml | deck file patch ${{ env.GOVERNANCE_DIR }}/kong/patches/*.yaml -o ${{ env.OUTPUT_DIR }}/kong-combined.yaml

      - name: Lint merged Kong Gateway configuration file
        run: |
          deck file lint -s ${{ env.OUTPUT_DIR }}/kong-combined.yaml ${{ env.GOVERNANCE_DIR }}/kong.ruleset.yaml;
        working-directory: ${{ env.OUTPUT_DIR }}

      - name: Validate merged Kong Gateway configuration file
        run: |
          deck file validate ${{ env.OUTPUT_DIR }}/kong-combined.yaml
        working-directory: ${{ env.OUTPUT_DIR }}

      - name: Debug
        run: |
          cat ${{ env.OUTPUT_DIR }}/kong-combined.yaml

      - name: Show combined config in summary
        if: ${{ inputs.show-summary }}
        run: |
            echo "### 🔧 Combined config Preview" >> $GITHUB_STEP_SUMMARY
            echo '```yaml' >> $GITHUB_STEP_SUMMARY
            cat ${{ env.OUTPUT_DIR }}/kong-combined.yaml >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Show diff in summary
        if: ${{ inputs.show-summary }}
        run: |
          echo "### 🔍 Diff Preview" >> $GITHUB_STEP_SUMMARY
          echo '```diff' >> $GITHUB_STEP_SUMMARY
          deck gateway diff ${{ env.OUTPUT_DIR }}/kong-combined.yaml  \
            --konnect-addr="${{ env.KONNECT_API_URL }}" \
            --konnect-token="${{ secrets.KONNECT_TOKEN }}" \
            --konnect-control-plane-name="${{ env.KONNECT_CONTROL_PLANE_NAME }}" >> $GITHUB_STEP_SUMMARY

      - name: Upload combined Kong Gateway configuration
        uses: actions/upload-artifact@v4
        with:
          name: kong-combined
          path: ${{ env.OUTPUT_DIR }}/kong-combined.yaml

  deploy:
    name: Deploy combined Kong Gateway configuration on ${{ inputs.entity }} ${{ inputs.environment }}
    needs: combine
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - uses: kong/setup-deck@v1

      - name: Load environment variables
        uses: ./.github/actions/load-env
        with:
          entity-common-vars: ${{ env.ENTITY_COMMON_VARS }}
          entity-env-vars: ${{ env.ENTITY_ENV_VARS }}
          entity: ${{ inputs.entity }}
          environment: ${{ inputs.environment }}
          api-name: ${{ matrix.api.name }}
          api-namespace: ${{ matrix.api.namespace }}
          api-enabled: ${{ matrix.api.enabled }}
          api-version: ${{ matrix.api.version }}

      - name: Download combined Kong Gateway configuration
        uses: actions/download-artifact@v4
        with:
          name: kong-combined
          path: ${{ env.OUTPUT_DIR }}/kong-combined.yaml

      - name: Get a backup of the previous Kong Gateway configuration
        run: |
          deck gateway dump \
            --select-tag generated_by:apiops \
            --konnect-addr="${{ env.KONNECT_API_URL }}" \
            --konnect-token="${{ secrets.KONNECT_TOKEN }}" \
            --konnect-control-plane-name="${{ env.KONNECT_CONTROL_PLANE_NAME }}" -o ${{ env.OUTPUT_DIR }}/kong_backup.yaml

      - name: Sync Kong Gateway configuration
        id: sync
        run: |
          deck gateway sync ${{ env.OUTPUT_DIR }}/kong-combined.yaml  \
            --no-mask-deck-env-vars-value \
            --konnect-addr="${{ env.KONNECT_API_URL }}" \
            --konnect-token="${{ secrets.KONNECT_TOKEN }}" \
            --konnect-control-plane-name="${{ env.KONNECT_CONTROL_PLANE_NAME }}"
        continue-on-error: true

      - name: Wait for changes to be propagated
        if: ${{ steps.sync.outcome == 'success' }}
        run: |
          sleep 5

      - name: Test the API
        if: ${{ steps.sync.outcome == 'success' }}
        id: test
        run: |
          # Add tests to check the API is working
          echo "API is working"
          exit 0
        continue-on-error: true

      - name: Revert to backup if sync or tests fail
        if: ${{ steps.sync.outcome == 'failure' || steps.test.outcome == 'failure' }}
        run: |
          deck gateway sync ${{ env.OUTPUT_DIR }}/kong_backup.yaml  \
            --no-mask-deck-env-vars-value \
            --konnect-addr="${{ env.KONNECT_API_URL }}" \
            --konnect-token="${{ secrets.KONNECT_TOKEN }}" \
            --konnect-control-plane-name="${{ env.KONNECT_CONTROL_PLANE_NAME }}"

      - name: Get recent backup
        if: ${{ steps.test.outcome == 'success' }}
        run: |
          deck gateway dump \
            --yes \
            --select-tag generated_by:apiops \
            --konnect-addr="${{ env.KONNECT_API_URL }}" \
            --konnect-token="${{ secrets.KONNECT_TOKEN }}" \
            --konnect-control-plane-name="${{ env.KONNECT_CONTROL_PLANE_NAME }}" -o ${{ env.OUTPUT_DIR }}/kong_backup.yaml

      - name: Upload recent backup
        uses: actions/upload-artifact@v4
        with:
          name: backup
          path: ${{ env.OUTPUT_DIR }}/kong_backup.yaml
