# Build APIs
# This action is responsible for building the Kong Gateway configurations for the given API
# It is called by the main build-deploy workflow and runs in parallel for each API defined in the entity's metadata.json file

# Key responsibilities:
# 1. Lint the OpenAPI spec
# 2. Convert the OpenAPI spec to Kong declarative config
# 3. Add plugins
# 4. Apply patches
# 5. Add namespace if required
# 6. Add tags
# 7. Render the Kong Gateway configuration
# 8. Validate the Kong Gateway configuration

# Action inputs:
# - entity: The entity (e.g., tripwhiz, roameasy) to build configurations for
# - environment: Target environment (development, acceptance, production)
# - api_name: The name of the API to build configurations for
# - api_version: The version of the API to build configurations for
# - api_namespace: The namespace of the API to build configurations for
# - api_enabled: Whether the API is enabled
# - api_spec: The path to the OpenAPI spec for the API

# Main outputs:
# - Generates a Kong Gateway configuration file
# - Each artifact follows the pattern: kong-combined-{entity}-{environment}.yaml


name: "Build APIs"
description: "Builds Kong Gateway configurations for each API"

inputs:
  entity:
    description: "The entity (e.g., tripwhiz, roameasy) to build configurations for"
    required: true
  environment:
    description: "Target environment (development, acceptance, production)"
    required: true
  api_name:
    description: "The name of the API to build configurations for"
    required: true
  api_version:
    description: "The version of the API to build configurations for"
    required: true
  api_namespace:
    description: "The namespace of the API to build configurations for"
    required: true
  api_enabled:
    description: "Whether the API is enabled"
    required: true
  api_spec:
    description: "The path to the OpenAPI spec for the API"
    required: true
  konnect_token:
    description: "Konnect API token"
    required: true

runs:
  using: "composite"
  steps:
    - uses: kong/setup-deck@v1
    - name: Lint OpenAPI Spec
      shell: bash
      run: |
        deck file lint -s ${{ inputs.api_spec }} $GOVERNANCE_DIR/openapi.ruleset.yaml

    - name: Convert OpenAPI Spec to Kong declarative config
      shell: bash
      run: |
        cat ${{ inputs.api_spec }} | deck file openapi2kong --generate-security -o $OUTPUT_DIR/${{ inputs.api_name }}-${{ inputs.api_version }}-kong.yaml

    - name: Add plugins
      shell: bash
      run: |
        plugin_folders=(
          "${{ env.ENTITIES_DIR_KONG }}/plugins"
          "${{ env.ENTITY_DIR_KONG }}/plugins"
          "${{ env.API_KONG_DIR }}/plugins"
        )

        for plugin_folder in "${plugin_folders[@]}"; do
          if [ -d "$plugin_folder" ] && [ "$(ls -A $plugin_folder/*.yaml 2>/dev/null)" ]; then
            cat $OUTPUT_DIR/${{ inputs.api_name }}-${{ inputs.api_version }}-kong.yaml | deck file add-plugins $plugin_folder/*.yaml -o $OUTPUT_DIR/${{ inputs.api_name }}-${{ inputs.api_version }}-kong.yaml
          fi
        done

    - name: Apply patches
      shell: bash
      run: |
        patch_folders=(
          "${{ env.ENTITIES_DIR_KONG }}/patches"
          "${{ env.ENTITY_DIR_KONG }}/patches"
          "${{ env.API_KONG_DIR }}/patches"
        )

        for patch_folder in "${patch_folders[@]}"; do
          if [ -d "$patch_folder" ] && [ "$(ls -A $patch_folder/*.yaml 2>/dev/null)" ]; then
            cat $OUTPUT_DIR/${{ inputs.api_name }}-${{ inputs.api_version }}-kong.yaml | deck file patch $patch_folder/*.yaml -o $OUTPUT_DIR/${{ inputs.api_name }}-${{ inputs.api_version }}-kong.yaml
          fi
        done

    - name: Add namespace if required
      shell: bash
      run: |
        if [ -n "$DECK_FILE_NAMESPACE_PATH_PREFIX" ] || [ -n "$DECK_FILE_NAMESPACE_HOST" ]; then
          cmd="deck file namespace"
          if [ -n "$DECK_FILE_NAMESPACE_PATH_PREFIX" ]; then
            cmd="$cmd --path-prefix=$DECK_FILE_NAMESPACE_PATH_PREFIX"
          fi
          if [ -n "$DECK_FILE_NAMESPACE_HOST" ]; then
            cmd="$cmd --host=$DECK_FILE_NAMESPACE_HOST"
          fi
          cat $OUTPUT_DIR/${{ inputs.api_name }}-${{ inputs.api_version }}-kong.yaml | $cmd -o $OUTPUT_DIR/${{ inputs.api_name }}-${{ inputs.api_version }}-kong.yaml
        else
          echo "Skipping namespace step as both path-prefix and host are empty."
        fi
      working-directory: ${{ env.OUTPUT_DIR }}

    - name: Add Tags
      shell: bash
      run: |
        cat $OUTPUT_DIR/${{ inputs.api_name }}-${{ inputs.api_version }}-kong.yaml | deck file add-tags $DECK_API_NAME $DECK_API_VERSION -o $OUTPUT_DIR/${{ inputs.api_name }}-${{ inputs.api_version }}-kong.yaml
      working-directory: ${{ env.ENTITY_DIR_KONG }}

    - name: Render Kong Gateway configuration
      shell: bash
      run: |
        deck file render --populate-env-vars $OUTPUT_DIR/${{ inputs.api_name }}-${{ inputs.api_version }}-kong.yaml \
          -o $OUTPUT_DIR/${{ inputs.api_name }}-${{ inputs.api_version }}-kong.yaml
      working-directory: ${{ env.OUTPUT_DIR }}

    - name: Validate Generated Kong Gateway configuration
      shell: bash
      run: deck file validate $OUTPUT_DIR/${{ inputs.api_name }}-${{ inputs.api_version }}-kong.yaml
      working-directory: ${{ env.OUTPUT_DIR }}

    - uses: actions/upload-artifact@v4
      with:
        name: artifacts-${{ inputs.entity }}-${{ inputs.environment }}-${{ inputs.api_name }}-${{ inputs.api_version }}
        path: ${{ env.OUTPUT_DIR }}/${{ inputs.api_name }}-${{ inputs.api_version }}-kong.yaml

